#!/usr/bin/env bash

# Check array of samples with dasgoclient

# Be strict, exit on error
set -euf -o pipefail

# Prepare sample list in vim; check every step carefully, as they might break:
# 1) Copy over samples of interest from HTML page
# 2) Transform each HTML link to a bash sample array member with this command
#    :g/^ *<li><a href/s#^.*<a[^>]*>\(.*\)</a>.*$#samples+=(\1)#
# 3) Replace some part of the sample names with a wildcard, e.g.
#    :g/^samples/s/MiniAODv2[^/]*/MiniAODv3*/
#    Make sure you substitute as many occurrences as you have samples
# 4) Find all duplicates and remove them (don't forget to save first):
#    :!grep '^samples' check_samples | sort | uniq -d
# 5) These commands should yield the same result:
#    :!grep '^samples' check_samples | sort | uniq | wc -l
#    :!grep '^samples' check_samples | wc -l

outfile=output.htm

samples=()
samples+=(/TTJets_SingleLeptFromT_TuneCUETP8M1_13TeV-madgraphMLM-pythia8/RunIISummer16MiniAODv3-PUSummer16v3Fast*/MINIAODSIM)
samples+=(/TTJets_SingleLeptFromTbar_TuneCUETP8M1_13TeV-madgraphMLM-pythia8/RunIISummer16MiniAODv3-PUSummer16v3Fast*/MINIAODSIM)
samples+=(/TTJets_DiLept_TuneCUETP8M1_13TeV-madgraphMLM-pythia8/RunIISummer16MiniAODv3-PUSummer16v3Fast*/MINIAODSIM)
samples+=(/DYJetsToLL_M-5to50_HT-70to100_TuneCUETP8M1_13TeV-madgraphMLM-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/DYJetsToLL_M-5to50_HT-100to200_TuneCUETP8M1_13TeV-madgraphMLM-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/DYJetsToLL_M-5to50_HT-200to400_TuneCUETP8M1_13TeV-madgraphMLM-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/DYJetsToLL_M-5to50_HT-400to600_TuneCUETP8M1_13TeV-madgraphMLM-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/DYJetsToLL_M-5to50_HT-600toInf_TuneCUETP8M1_13TeV-madgraphMLM-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/DYJetsToLL_M-50_HT-70to100_TuneCUETP8M1_13TeV-madgraphMLM-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/DYJetsToLL_M-50_HT-100to200_TuneCUETP8M1_13TeV-madgraphMLM-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/DYJetsToLL_M-50_HT-200to400_TuneCUETP8M1_13TeV-madgraphMLM-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/DYJetsToLL_M-50_HT-400to600_TuneCUETP8M1_13TeV-madgraphMLM-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/DYJetsToLL_M-50_HT-600to800_TuneCUETP8M1_13TeV-madgraphMLM-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/DYJetsToLL_M-50_HT-800to1200_TuneCUETP8M1_13TeV-madgraphMLM-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/DYJetsToLL_M-50_HT-1200to2500_TuneCUETP8M1_13TeV-madgraphMLM-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/DYJetsToLL_M-50_HT-2500toInf_TuneCUETP8M1_13TeV-madgraphMLM-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/WJetsToLNu_HT-70To100_TuneCUETP8M1_13TeV-madgraphMLM-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/WJetsToLNu_HT-100To200_TuneCUETP8M1_13TeV-madgraphMLM-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/WJetsToLNu_HT-200To400_TuneCUETP8M1_13TeV-madgraphMLM-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/WJetsToLNu_HT-400To600_TuneCUETP8M1_13TeV-madgraphMLM-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/WJetsToLNu_HT-600To800_TuneCUETP8M1_13TeV-madgraphMLM-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/WJetsToLNu_HT-800To1200_TuneCUETP8M1_13TeV-madgraphMLM-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/WJetsToLNu_HT-1200To2500_TuneCUETP8M1_13TeV-madgraphMLM-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/WJetsToLNu_HT-2500ToInf_TuneCUETP8M1_13TeV-madgraphMLM-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/WZTo2L2Q_13TeV_amcatnloFXFX_madspin_pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/WZTo3LNu_TuneCUETP8M1_13TeV-powheg-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/VVTo2L2Nu_13TeV_amcatnloFXFX_madspin_pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/VHToNonbb_M125_13TeV_amcatnloFXFX_madspin_pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/ZZTo2L2Q_13TeV_amcatnloFXFX_madspin_pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/ZZTo4L_13TeV_powheg_pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/WWTo2L2Nu_DoubleScattering_13TeV-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/WpWpJJ_EWK-QCD_TuneCUETP8M1_13TeV-madgraph-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/TGJets_leptonDecays_scaleup_13TeV_amcatnlo_madspin_pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/ST_tW_top_5f_inclusiveDecays_13TeV-powheg-pythia8_TuneCUETP8M1/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/ST_tW_antitop_5f_inclusiveDecays_13TeV-powheg-pythia8_TuneCUETP8M1/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/TTWJetsToLNu_TuneCUETP8M1_13TeV-amcatnloFXFX-madspin-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/TTZToLLNuNu_M-10_TuneCUETP8M1_13TeV-amcatnlo-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/TTZToLL_M-1to10_TuneCUETP8M1_13TeV-madgraphMLM-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/ttHToNonbb_M125_TuneCUETP8M2_ttHtranche3_13TeV-powheg-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/TTTT_TuneCUETP8M1_13TeV-amcatnlo-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/tZq_ll_4f_13TeV-amcatnlo-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/ST_tWll_5f_LO_13TeV-MadGraph-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/ZZZ_TuneCUETP8M1_13TeV-amcatnlo-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/WZZ_TuneCUETP8M1_13TeV-amcatnlo-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/WWZ_TuneCUETP8M1_13TeV-amcatnlo-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)
samples+=(/WWW_4F_TuneCUETP8M1_13TeV-amcatnlo-pythia8/RunIISummer16MiniAODv3*/MINIAODSIM)

# First check if there are any duplicate strings in the samples array
dups=$(printf '%s\n' "${samples[@]}"|awk '!($0 in seen){seen[$0];next} 1')
if [ ! -z "${dups}" ]; then
    echo "The following duplicates are found in the samples array:" 2>&1
    echo "${dups}" 2>&1
    echo "Exit."
    exit 1
fi

# Before printing the output to the out file, backup the previous out file;
# the outfile before the previous out file will get overwritten, though;
# so you should still be careful
mv "${outfile}" "${outfile}".bkp 2>/dev/null || true

# Now get full sample name from string in array, perform some basic checks
for sample in "${samples[@]}"; do

    #echo dasgoclient --query="dataset=${sample}"

    # Query DAS and store result in variable for further processing
    result=$(dasgoclient --query="dataset=${sample}")

    # If result is empty, throw error
    if [ -z "${result}" ]; then
        echo "The following sample yields no results:" 2>&1
        echo "${sample}" 2>&1
        echo "Exit."
        exit 1
    fi

    # If result is not unique, throw error
    # We check that the result variable has exactly one line/sample, which
    # simply means, it's unique
    #if [ $(wc -l <<< "${result}") -ne 1 ]; then
    # If it has multiple lines, and the additional samples are just extensions,
    # then the result is still unique
    if [ $(sed 's/_ext[0-9]//' <<< "${result}" | uniq | wc -l) -ne 1 ]; then

        echo "The following sample is not unique:" 2>&1
        echo "${sample}" 2>&1
        echo "It yields the following results:" 2>&1
        echo "${result}" 2>&1
        echo "Exit."
        exit 1
    fi

    # Print result
    #echo "${result}"
    # Better: Print result with link to DAS
    #echo "<li><a href="https://cmsweb.cern.ch/das/request?input=${result}">${result}</a></li>"
    # Still better: Print result with link to DAS and catch multiple samples
    IFS=$'\n'
    for r in ${result}; do
        # Output to stdout
        echo "${r}"
        # Output to HTML file
        echo "<li><a href=\"https://cmsweb.cern.ch/das/request?input=${r}\">${r}</a></li>" >> "${outfile}"
    done

done

# No errors, we made it!
echo "Bye."
